- name: Verify
  hosts: localhost
  connection: local
  vars:
    cluster: openshift
    ansible_python_interpreter: '{{ ansible_playbook_python }}'
    custom_resource: "{{ lookup('file', '/'.join([deploy_dir, 'crds/osb_v1_templateservicebroker_cr.yaml'])) | from_yaml }}"
    test_namespace: tsbo-test
    ready_status_query: "status.conditions[?type == 'Ready'].status"
    available_status_query: "status.conditions[?type == 'Available'].status"
    django_psql_query: "{{
      lookup(
        'k8s',
        api_version='servicecatalog.k8s.io/v1beta1',
        kind='ServiceInstance',
        namespace=test_namespace,
        resource_name='django-psql'
      ) | json_query(ready_status_query)
    }}"
    postgresql_query: "{{
      lookup(
        'k8s',
        api_version='servicecatalog.k8s.io/v1beta1',
        kind='ServiceInstance',
        namespace=test_namespace,
        resource_name='postgresql'
      ) | json_query(ready_status_query)
    }}"
    django_psql_deployment: "{{
      lookup(
        'k8s',
        api_version='apps/v1' if cluster == 'kubernetes' else 'apps.openshift.io/v1',
        kind='Deployment' if cluster == 'kubernetes' else 'DeploymentConfig',
        namespace=test_namespace,
        resource_name='django-psql'
      )
    }}"
    django_psql_ready: "{{ django_psql_deployment | json_query('status.readyReplicas') }}"
    django_psql_replicas: "{{ django_psql_deployment | json_query('status.replicas') }}"
    django_psql_updated: "{{ django_psql_deployment | json_query('status.updatedReplicas') }}"
    django_psql_available: "{{ django_psql_deployment | json_query(available_status_query) }}"
    binding_query: "{{
      lookup(
        'k8s',
        api_version='servicecatalog.k8s.io/v1beta1',
        kind='ServiceBinding',
        namespace=test_namespace,
        resource_name='postgresql-binding'
      ) | json_query(ready_status_query)
    }}"


  tasks:
    - block:
        - name: Verify cr is created
          assert:
            that:
            - cr
          vars:
            cr: '{{ lookup("k8s", kind="TemplateServiceBroker",
              api_version="osb.openshift.io/v1",
              namespace=namespace,
              resource_name=custom_resource.metadata.name,
            )}}'

        - name: Wait until cluster service broker is ready
          k8s_facts:
            api_version: servicecatalog.k8s.io/v1beta1
            kind: ClusterServiceBroker
            name: "{{ custom_resource.metadata.name }}"
          register: csb
          until:
          - "'Ready' in (csb | json_query('resources[].status.conditions[].type'))"
          - "'FetchedCatalog' in (csb | json_query('resources[].status.conditions[].reason'))"
          delay: 10
          retries: 90

        - name: Create test namespace
          k8s:
            definition:
              apiVersion: v1
              kind: Namespace
              metadata:
                name: '{{ test_namespace }}'

        - name: Provision django_psql
          k8s:
            state: present
            definition:
              apiVersion: servicecatalog.k8s.io/v1beta1
              kind: ServiceInstance
              metadata:
                name: django-psql
                namespace: '{{ test_namespace }}'
              spec:
                clusterServiceClassExternalName: django-psql-example
                clusterServicePlanExternalName: default
                parameters:
                  NAME: django-psql
                  DATABASE_SERVICE_NAME: django-example-postgresql

        - name: Wait for django-psql service instance
          debug:
            msg: "instance ready status: {{ django_psql_query }}"
          retries: 90
          delay: 10
          until: django_psql_query | length > 0 and django_psql_query | first == "True"

        - name: Retrieve route
          k8s_facts:
            api_version: route.openshift.io/v1
            kind: Route
            name: "django-psql"
            namespace: "{{ test_namespace }}"
          register: django_psql_route

        - debug:
            msg: "{{ django_psql_route.resources[0] }}"

        - name: "Verify django_psql"
          uri:
            url: "http://{{ django_psql_route.resources[0].status.ingress[0].host }}"
            return_content: yes
          retries: 30
          delay: 10
          register: webpage
          until:
            - webpage.status == 200
            - "'Welcome to your Django application on OpenShift' in webpage.content"

        - name: Provision postgresql
          k8s:
            state: present
            definition:
              apiVersion: servicecatalog.k8s.io/v1beta1
              kind: ServiceInstance
              metadata:
                name: postgresql
                namespace: '{{ test_namespace}}'
              spec:
                clusterServiceClassExternalName: postgresql-ephemeral
                clusterServicePlanExternalName: default

        - name: Wait for postgresql service instance
          debug:
            msg: "Instance ready status: {{ postgresql_query }}"
          retries: 30
          delay: 10
          until: postgresql_query | length > 0 and postgresql_query | first == "True"

        - name: Create binding
          k8s:
            state: present
            definition:
              apiVersion: servicecatalog.k8s.io/v1beta1
              kind: ServiceBinding
              metadata:
                name: postgresql-binding
                namespace: '{{ test_namespace }}'
              spec:
                instanceRef:
                  name: postgresql
                secretName: postgresql-binding

        - name: Wait for postgresql binding instance
          debug:
            msg: "Binding ready status: {{ binding_query }}"
          retries: 30
          delay: 10
          until: binding_query | length > 0 and binding_query | first == "True"

        - name: Delete binding
          k8s:
            state: absent
            definition:
              apiVersion: servicecatalog.k8s.io/v1beta1
              kind: ServiceBinding
              metadata:
                name: postgresql-binding
                namespace: "{{ test_namespace }}"

        - name: Wait for postgresql binding instance to be removed
          debug:
            msg: "Binding ready status: {{ binding_query }}"
          retries: 30
          delay: 10
          until: not binding_query

        - name: Deprovision postgresql
          k8s:
            state: absent
            definition:
              apiVersion: servicecatalog.k8s.io/v1beta1
              kind: ServiceInstance
              metadata:
                name: postgresql
                namespace: "{{ test_namespace }}"

        - name: Wait for postgresql service instance to be removed
          debug:
            msg: "Instance ready status: {{ postgresql_query }}"
          retries: 30
          delay: 10
          until: not postgresql_query

        - name: Deprovision django_psql
          k8s:
            state: absent
            definition:
              apiVersion: servicecatalog.k8s.io/v1beta1
              kind: ServiceInstance
              metadata:
                name: django-psql
                namespace: "{{ test_namespace }}"

        - name: Wait for django_psql service instance to be removed
          debug:
            msg: "Instance ready status: {{ django_psql_query }}"
          retries: 30
          delay: 10
          until: not django_psql_query

      rescue:
      - name: debug cr
        ignore_errors: yes
        failed_when: false
        debug:
          var: debug_cr
        vars:
          debug_cr: '{{ lookup("k8s", kind="TemplateServiceBroker",
              api_version="osb.openshift.io/v1",
              namespace=test_namespace,
              resource_name=custom_resource.metadata.name,
          )}}'

      - name: "debug pods in {{ test_namespace }}"
        ignore_errors: yes
        failed_when: false
        debug:
          var: debug_pods
        vars:
          debug_pods: '{{ lookup("k8s", kind="pods",
              api_version="v1",
              namespace=test_namespace,
          )}}'

      - name: "debug pods in {{ namespace }}"
        ignore_errors: yes
        failed_when: false
        debug:
          var: debug_pods
        vars:
          debug_pods: '{{ lookup("k8s", kind="pods",
              api_version="v1",
              namespace=namespace,
          )}}'

      - name: get operator logs
        ignore_errors: yes
        failed_when: false
        command: kubectl logs deployment/{{ definition.metadata.name }} -n {{ namespace }}
        vars:
          definition: "{{ lookup('file', '/'.join([deploy_dir, 'testing', 'operator.yaml.j2'])) | from_yaml }}"
        register: log

      - debug: var=log.stdout_lines

      - fail:
          msg: "Failed in asserts.yml"
